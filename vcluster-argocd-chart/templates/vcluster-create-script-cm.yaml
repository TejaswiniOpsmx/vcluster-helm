apiVersion: v1
data:
  vcluster-create.sh: |
    #!/bin/bash
    export user=$1
    echo the user is $user the user
    usage='error: Usage: vcluster-create.sh username'
    if [ -z $user ]; then echo $usage; exit 1; fi
    username=$(echo $user | sed 's/@/-at-/g' | sed 's/\./-dot-/g')
    kubectl version
    vcluster version
    echo
    echo
    echo creating vcluster
    echo
    echo
    vcluster create --upgrade $username -n $username --connect=false -f /values/values.yaml
    ingresshost={{ .Values.username}}.{{ .Values.hostname }}
     echo
     echo
     SECRET_NAME="$username"-kubeconfig
     # Namespace where the secret is located
     NAMESPACE="$username"

      # Loop until the secret exists
      while true; do
        # Check if the secret exists
         kubectl get secret $SECRET_NAME -n $NAMESPACE &> /dev/null
    
          # If the secret exists, break the loop
         if [ $? -eq 0 ]; then
             echo "Secret '$SECRET_NAME' found in namespace '$NAMESPACE'."
             break
          else
           echo "Waiting for secret '$SECRET_NAME' in namespace '$NAMESPACE'..."
            fi
    
    # Wait for 5 seconds before checking again
            sleep 5
      done

        echo "The secret '$SECRET_NAME' now exists."


    #vcluster connect $username -n $username --update-current=false --server=https://"$ingresshost"
    kubectl -n $username get secret 
    kubectl -n $username get secret "$username"-kubeconfig-secret -o jsonpath='{.data.config}' | base64 -d > kubeconfig.yaml
    kubectl --kubeconfig=kubeconfig.yaml get ns
    input_yaml=kubeconfig.yaml
    ca_data=$(yq e '.clusters[0].cluster."certificate-authority-data"' $input_yaml)
    cert_data=$(yq e '.users[0].user."client-certificate-data"' $input_yaml)
    key_data=$(yq e '.users[0].user."client-key-data"' $input_yaml)

    # Create JSON output
    json_output=$(cat <<EOF
    {
     "tlsClientConfig": {
     "insecure": false,
     "certData": "$cert_data",
     "keyData": "$key_data",
     "caData": "$ca_data"
    }
    }
    EOF
     )
    # Output JSON
     echo "$json_output" > config
    echo
    echo
    kubectl -n argocd create secret generic cluster-{{ .Values.username}}.{{ .Values.hostname }}-1234567890 --from-file=config --from-literal=name={{ .Values.username}} --from-literal=server=https://{{ .Values.username}}.{{ .Values.hostname }}:443 -o yaml --dry-run=client | kubectl -n argocd apply -f -       
    kubectl -n argocd label secret cluster-{{ .Values.username}}.{{ .Values.hostname }}-1234567890 argocd.argoproj.io/secret-type=cluster

kind: ConfigMap
metadata:
  name: {{ .Values.username }}-vcluster-create-script
